"use client"

import { useState } from "react"
import { Send, MessageCircle, Phone } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useToast } from "@/hooks/use-toast"
import { telegramService } from "@/lib/telegram"

export function CustomOrderForm() {
  const { toast } = useToast()
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [formData, setFormData] = useState({
    contactMethod: "",
    name: "",
    telegramNick: "",
    phoneNumber: "",
    request: ""
  })

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.contactMethod || !formData.name || !formData.request) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive"
      })
      return
    }

    if (formData.contactMethod === "telegram" && !formData.telegramNick) {
      toast({
        title: "–û—à–∏–±–∫–∞", 
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –≤ Telegram",
        variant: "destructive"
      })
      return
    }

    if (formData.contactMethod === "whatsapp" && !formData.phoneNumber) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è WhatsApp",
        variant: "destructive"
      })
      return
    }

    setIsSubmitting(true)

    try {
      const message = `üõçÔ∏è –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ó–ê–ö–ê–ó

üë§ –ò–º—è: ${formData.name}
üìû –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${formData.contactMethod === "telegram" ? "Telegram" : "WhatsApp"}
${formData.contactMethod === "telegram" ? `üì± Telegram: @${formData.telegramNick}` : `üì± WhatsApp: ${formData.phoneNumber}`}

üìù –ó–∞–ø—Ä–æ—Å:
${formData.request}

‚è∞ –î–∞—Ç–∞: ${new Date().toLocaleString("ru-RU")}`

      await telegramService.sendMessage(message)
      
      toast({
        title: "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        description: "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
      })

      // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
      setFormData({
        contactMethod: "",
        name: "",
        telegramNick: "",
        phoneNumber: "",
        request: ""
      })
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error)
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é",
        variant: "destructive"
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <Card className="w-full max-w-2xl mx-auto animate-fade-in-up dark:bg-gray-800/50 dark:border-gray-700">
      <CardHeader className="text-center">
        <CardTitle className="text-2xl font-bold text-gray-900 dark:text-white">
          –ó–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        </CardTitle>
        <CardDescription className="text-gray-600 dark:text-gray-300">
          –ù–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä? –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —ç—Ç–æ –≤ –°–®–ê
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="contactMethod">–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏ *</Label>
            <Select value={formData.contactMethod} onValueChange={(value) => handleInputChange("contactMethod", value)}>
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="telegram">
                  <div className="flex items-center gap-2">
                    <MessageCircle className="h-4 w-4" />
                    Telegram
                  </div>
                </SelectItem>
                <SelectItem value="whatsapp">
                  <div className="flex items-center gap-2">
                    <Phone className="h-4 w-4" />
                    WhatsApp
                  </div>
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="name">–ò–º—è *</Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) => handleInputChange("name", e.target.value)}
              placeholder="–í–∞—à–µ –∏–º—è"
              required
              className="dark:bg-gray-700 dark:border-gray-600"
            />
          </div>

          {formData.contactMethod === "telegram" && (
            <div className="space-y-2">
              <Label htmlFor="telegramNick">–ù–∏–∫ –≤ Telegram *</Label>
              <Input
                id="telegramNick"
                value={formData.telegramNick}
                onChange={(e) => handleInputChange("telegramNick", e.target.value)}
                placeholder="–ë–µ–∑ —Å–∏–º–≤–æ–ª–∞ @"
                required
                className="dark:bg-gray-700 dark:border-gray-600"
              />
            </div>
          )}

          {formData.contactMethod === "whatsapp" && (
            <div className="space-y-2">
              <Label htmlFor="phoneNumber">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *</Label>
              <Input
                id="phoneNumber"
                value={formData.phoneNumber}
                onChange={(e) => handleInputChange("phoneNumber", e.target.value)}
                placeholder="+7 (999) 123-45-67"
                required
                className="dark:bg-gray-700 dark:border-gray-600"
              />
            </div>
          )}

          <div className="space-y-2">
            <Label htmlFor="request">–ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ? *</Label>
            <Textarea
              id="request"
              value={formData.request}
              onChange={(e) => handleInputChange("request", e.target.value)}
              placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –±—Ä–µ–Ω–¥, –º–æ–¥–µ–ª—å, —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç –∏ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏..."
              required
              rows={4}
              className="dark:bg-gray-700 dark:border-gray-600"
            />
          </div>

          <Button 
            type="submit" 
            className="w-full bg-blue-600 hover:bg-blue-700 text-white transition-all duration-200 hover:scale-105"
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º..."
            ) : (
              <>
                <Send className="h-4 w-4 mr-2" />
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
              </>
            )}
          </Button>
        </form>
      </CardContent>
    </Card>
  )
}
