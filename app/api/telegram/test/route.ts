import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN
    const chatId = process.env.TELEGRAM_CHAT_ID

    if (!botToken || !chatId) {
      return NextResponse.json({ error: "Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" }, { status: 500 })
    }

    const testMessage = {
      chat_id: chatId,
      text:
        "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\nTelegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\nüìÖ " +
        new Date().toLocaleString("ru-RU"),
      parse_mode: "HTML" as const,
    }

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(testMessage),
    })

    const data = await response.json()

    if (!response.ok || !data.ok) {
      throw new Error(data.description || "–û—à–∏–±–∫–∞ Telegram API")
    }

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error("Test message error:", error)
    return NextResponse.json({ error: error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 })
  }
}
