import { NextRequest, NextResponse } from "next/server"

interface TelegramMessage {
  chat_id: string
  text: string
  parse_mode?: "HTML" | "Markdown"
}

interface ContactData {
  name: string
  email: string
  message: string
}

interface OrderData {
  orderId: string
  customerName: string
  contactMethod: string
  contactValue: string
  items: Array<{
    name: string
    price: number
    quantity: number
  }>
  totalPrice: number
}

export async function POST(request: NextRequest) {
  try {
    const { type, data } = await request.json()

    if (!type || !data) {
      return NextResponse.json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞" }, { status: 400 })
    }

    const botToken = process.env.TELEGRAM_BOT_TOKEN
    const chatId = process.env.TELEGRAM_CHAT_ID

    if (!botToken || !chatId) {
      console.error("‚ùå Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
      return NextResponse.json({ error: "Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" }, { status: 500 })
    }

    let message = ""

    if (type === "contact") {
      const contactData = data as ContactData
      message = `
üîî <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞</b>

üë§ <b>–ò–º—è:</b> ${contactData.name}
üìß <b>Email:</b> ${contactData.email}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${contactData.message}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
      `.trim()
    } else if (type === "order") {
      const orderData = data as OrderData
      const itemsList = orderData.items
        .map(item => `‚Ä¢ ${item.name} - $${item.price} x ${item.quantity}`)
        .join('\n')

      message = `
üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderData.orderId}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.customerName}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${orderData.contactMethod} - ${orderData.contactValue}

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
${itemsList}

üí∞ <b>–ò—Ç–æ–≥–æ:</b> $${orderData.totalPrice}

‚è∞ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> ${new Date().toLocaleString('ru-RU')}
      `.trim()
    } else {
      return NextResponse.json({ error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è" }, { status: 400 })
    }

    const telegramMessage: TelegramMessage = {
      chat_id: chatId,
      text: message,
      parse_mode: "HTML",
    }

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${type} —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...`)

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(telegramMessage),
    })

    const responseData = await response.json()

    if (!response.ok || !responseData.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ Telegram API:", responseData)
      throw new Error(responseData.description || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    }

    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    return NextResponse.json({ success: true })
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" },
      { status: 500 }
    )
  }
}
