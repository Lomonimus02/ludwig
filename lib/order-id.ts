// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –∑–∞–∫–∞–∑–æ–≤
export class OrderIdGenerator {
  private static getStoredCounter(): number {
    if (typeof window === "undefined") return 1
    const stored = localStorage.getItem("america_express_order_counter")
    return stored ? Number.parseInt(stored, 10) : 1
  }

  private static setStoredCounter(counter: number): void {
    if (typeof window === "undefined") return
    localStorage.setItem("america_express_order_counter", counter.toString())
  }

  static generateOrderId(): string {
    const counter = this.getStoredCounter()
    const date = new Date()

    // –§–æ—Ä–º–∞—Ç: AE-YYYYMMDD-XXX (AE = America Express)
    const year = date.getFullYear()
    const month = String(date.getMonth() + 1).padStart(2, "0")
    const day = String(date.getDate()).padStart(2, "0")
    const orderNumber = String(counter).padStart(3, "0")

    const orderId = `AE-${year}${month}${day}-${orderNumber}`

    // –í–ê–ñ–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è ID
    this.setStoredCounter(counter + 1)

    console.log(`üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω orderId: ${orderId}, —Å–ª–µ–¥—É—é—â–∏–π —Å—á–µ—Ç—á–∏–∫: ${counter + 1}`)

    return orderId
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å timestamp
  static generateServerOrderId(): string {
    const timestamp = Date.now()
    const random = Math.floor(Math.random() * 1000)
      .toString()
      .padStart(3, "0")
    const date = new Date()
    const dateStr =
      date.getFullYear().toString().slice(-2) +
      String(date.getMonth() + 1).padStart(2, "0") +
      String(date.getDate()).padStart(2, "0")

    return `AE-${dateStr}-${timestamp.toString().slice(-6)}-${random}`
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  static resetCounter(): void {
    if (typeof window !== "undefined") {
      localStorage.removeItem("america_express_order_counter")
      console.log("üîÑ –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ —Å–±—Ä–æ—à–µ–Ω")
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  static getCurrentCounter(): number {
    return this.getStoredCounter()
  }
}
