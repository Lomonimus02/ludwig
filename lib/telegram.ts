import { OrderIdGenerator } from "./order-id"

interface TelegramMessage {
  chat_id: string
  text: string
  parse_mode?: "HTML" | "Markdown"
}

interface CartItem {
  id: number
  name: string
  price: number
  quantity: number
  selectedOptions?: {
    color?: string
    size?: string
    storage?: string
    memory?: string
  }
}

interface CustomerData {
  name: string
  phone: string
  email: string
}

interface OrderData {
  orderId: string
  items: CartItem[]
  totalPrice: number
  timestamp: string
  customer: CustomerData
}

export class TelegramService {
  private formatOrderMessage(orderData: OrderData): string {
    const { orderId, items, totalPrice, customer } = orderData

    const orderHeader = `üõçÔ∏è <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ America Express</b>\nüìã <b>–ó–∞–∫–∞–∑ ‚Ññ${orderId}</b>\n\n`

    const customerInfo =
      `üë§ <b>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n` +
      `   üìù –ò–º—è: <b>${customer.name}</b>\n` +
      `   üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>${customer.phone}</b>\n` +
      `   üìß Email: <b>${customer.email}</b>\n\n`

    const itemsList =
      `üõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n` +
      items
        .map((item, index) => {
          let itemText = `${index + 1}. <b>${item.name}</b>\n`
          itemText += `   üí∞ $${item.price} √ó ${item.quantity} = <b>$${item.price * item.quantity}</b>\n`

          if (item.selectedOptions) {
            const options = []
            if (item.selectedOptions.color) options.push(`üé® ${item.selectedOptions.color}`)
            if (item.selectedOptions.size) options.push(`üìè ${item.selectedOptions.size}`)
            if (item.selectedOptions.storage) options.push(`üíæ ${item.selectedOptions.storage}`)
            if (item.selectedOptions.memory) options.push(`üß† ${item.selectedOptions.memory}`)

            if (options.length > 0) {
              itemText += `   üìã ${options.join(" | ")}\n`
            }
          }

          return itemText
        })
        .join("\n")

    const orderFooter =
      `\nüíµ <b>–ò—Ç–æ–≥–æ: $${totalPrice}</b>\n` + `üì¶ <i>+ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –°–®–ê (—Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)</i>\n\n`

    const timestamp = `üìÖ ${new Date().toLocaleString("ru-RU", {
      timeZone: "Europe/Moscow",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    })}`

    return orderHeader + customerInfo + itemsList + orderFooter + timestamp
  }

  async sendOrderWithCustomerData(
    items: CartItem[],
    totalPrice: number,
    customerData: CustomerData,
  ): Promise<{ success: boolean; error?: string; orderId?: string }> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
      const orderId = OrderIdGenerator.generateOrderId()
      console.log(`üÜî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å ID: ${orderId}`)

      const orderData: OrderData = {
        orderId,
        items,
        totalPrice,
        timestamp: new Date().toISOString(),
        customer: customerData,
      }

      const message = this.formatOrderMessage(orderData)

      const response = await fetch("/api/telegram/send-order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          orderData,
          message,
        }),
      })

      const data = await response.json()
      if (!response.ok) {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞")
      }

      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`)
      return { success: true, orderId }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:", error)
      return {
        success: false,
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      }
    }
  }

  async sendOrder(
    items: CartItem[],
    totalPrice: number,
  ): Promise<{ success: boolean; error?: string; orderId?: string }> {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    throw new Error("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendOrderWithCustomerData –≤–º–µ—Å—Ç–æ sendOrder")
  }

  async sendMessage(text: string): Promise<{ success: boolean; error?: string }> {
    try {
      const response = await fetch("/api/telegram/send-message", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: text }),
      })

      const data = await response.json()
      if (!response.ok) {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
      }

      return { success: true }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
      return {
        success: false,
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      }
    }
  }

  async sendTestMessage(): Promise<{ success: boolean; error?: string }> {
    if (!process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN || !process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID) {
      return {
        success: false,
        error: "Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
      }
    }

    try {
      const testOrderId = OrderIdGenerator.generateServerOrderId()
      const message: TelegramMessage = {
        chat_id: process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID,
        text: `üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\nüìã <b>–¢–µ—Å—Ç ‚Ññ${testOrderId}</b>\n\nTelegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`,
        parse_mode: "HTML",
      }

      const response = await fetch(
        `https://api.telegram.org/bot${process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN}/sendMessage`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(message),
        },
      )

      const data = await response.json()

      if (!response.ok || !data.ok) {
        throw new Error(data.description || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
      }

      return { success: true }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      }
    }
  }
}

export const telegramService = new TelegramService()
